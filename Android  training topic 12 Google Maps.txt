Google Maps

u can show any location on the map , or can show different routes on the map e.t.c. 
You can also customize the map according to your choices.


==============Google Map - Layout file=========

<fragment
   android:id="@+id/map"
   android:name="com.google.android.gms.maps.MapFragment"
   android:layout_width="match_parent"
   android:layout_height="match_parent"/>


=================Google Map - AndroidManifest file============

<!--Permissions-->

<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="com.google.android.providers.gsf.permission.
   READ_GSERVICES" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

<!--Google MAP API key-->

<meta-data
   android:name="com.google.android.maps.v2.API_KEY"
   android:value="AIzaSyDKymeBXNeiFWY5jRUejv6zItpmr2MVyQ0" /> 


================ Customizing Google Map==============


You can easily customize google map from its default view ,
 and change it according to your demand.


=====================Adding Marker=============

You can place a maker with some text over it displaying your location on the map. It can be done by via addMarker() method. Its syntax is given below -

final LatLng TutorialsPoint = new LatLng(21 , 57);

Marker TP = googleMap.addMarker(new MarkerOptions()

   .position(TutorialsPoint).title("TutorialsPoint")); 

===========Channing Map Type=============

You can also change the type of the MAP. There are four different types of map and each give different view of the map. These types are Normal,Hybrid,Satellite and terrain. You can use them as below

googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
googleMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);


====================Enable/Disable zoom=================


setZoomControlsEnabled(boolean) method. Its syntax is given below -

googleMap.getUiSettings().setZoomGesturesEnabled(true);





1	addCircle(CircleOptions options)

		This method add a circle to the map

2	addPolygon(PolygonOptions options)

		This method add a polygon to the map

3	addTileOverlay(TileOverlayOptions options)

		This method add tile overlay to the map

4	animateCamera(CameraUpdate update)

		This method Moves the map according to the update with an animation

5	clear()

		This method removes everything from the map.

6	getMyLocation()

		This method returns the currently displayed user location.

7	moveCamera(CameraUpdate update)

		This method repositions the camera according to the instructions defined in the update

8	setTrafficEnabled(boolean enabled)

		This method Toggles the traffic layer on or off.

9	snapshot(GoogleMap.SnapshotReadyCallback callback)

		This method Takes a snapshot of the map

10	stopAnimation()
		
		This method stops the camera animation if there is one in progress


============
 here copy pas values

https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=8E:3D:62:9F:D3:C8:6F:E4:F2:36:7E:E4:59:87:43:59:87:10:BB:58%3Bcom.zaaviyah.zaaviyah_googlemaps


create key:

AIzaSyBqcrakyN2Q4uRA5qvXlhF21a0fEOaG6j0


=================
<resources>
    <!--
    TODO: Before you run your application, you need a Google Maps API key.

    To get one, follow this link, follow the directions and press "Create" at the end:

    https://console.developers.google.com/flows/enableapi?apiid=maps_android_backend&keyType=CLIENT_SIDE_ANDROID&r=8E:3D:62:9F:D3:C8:6F:E4:F2:36:7E:E4:59:87:43:59:87:10:BB:58%3Bcom.zaaviyah.zaaviyah_googlemaps

    You can also add your credentials to an existing key, using these values:

    Package name:
    8E:3D:62:9F:D3:C8:6F:E4:F2:36:7E:E4:59:87:43:59:87:10:BB:58

    SHA-1 certificate fingerprint:
    8E:3D:62:9F:D3:C8:6F:E4:F2:36:7E:E4:59:87:43:59:87:10:BB:58

    Alternatively, follow the directions here:
    https://developers.google.com/maps/documentation/android/start#get-key

    Once you have your key (it starts with "AIza"), replace the "google_maps_key"
    string in this file.
    -->
    <string name="google_maps_key" templateMergeStrategy="preserve" translatable="false">YOUR_KEY_HERE</string>
</resources>
===============

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.zaaviyah.zaaviyah_googlemaps">

    <!--
         The ACCESS_COARSE/FINE_LOCATION permissions are not required to use
         Google Maps Android API v2, but you must specify either coarse or fine
         location permissions for the 'MyLocation' functionality. 
    -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme">

        <!--
             The API key for Google Maps-based APIs is defined as a string resource.
             (See the file "res/values/google_maps_api.xml").
             Note that the API key is linked to the encryption key used to sign the APK.
             You need a different API key for each encryption key, including the release key that is used to
             sign the APK for publishing.
             You can define the keys for the debug and release targets in src/debug/ and src/release/. 
        -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="AIzaSyBqcrakyN2Q4uRA5qvXlhF21a0fEOaG6j0" />

        <activity
            android:name=".MapsActivity"
            android:label="@string/title_activity_maps">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>

=================

<fragment xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:map="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/map"
    android:name="com.google.android.gms.maps.SupportMapFragment"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.zaaviyah.zaaviyah_googlemaps.MapsActivity" />


=========================

package com.zaaviyah.zaaviyah_googlemaps;

import android.support.v4.app.FragmentActivity;
import android.os.Bundle;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {

    private GoogleMap mMap;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }


    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        // Add a marker in Sydney and move the camera
        LatLng sydney = new LatLng(-34, 151);
        mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
    }
}
=

===================






